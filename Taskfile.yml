# Code generated by task taskfile:gen; DO NOT EDIT.
env:
  GO111MODULE: "true"
  GOPRIVATE: github.com/ghostsquad
  GOPROXY: https://proxy.golang.org,direct
  JSONNET_PATH: jsonnet-vendor:vendor
  JSONNETPKG_HOME: jsonnet-vendor
tasks:
  build:
    cmds:
    - |
      docker buildx build
        --tag {{.APP_IMAGE}}
        --build-arg GOLANG_BUILDER_IMAGE={{.GOLANG_BUILDER_IMAGE}}
        --build-arg DEBIAN_IMAGE={{.DEBIAN_IMAGE}}
        {{.BUILD_ARGS}}
        .
    label: build with {{.BUILD_ARGS}}
    run: once
    vars:
      APP_VERSION: '{{.GIT_COMMIT}}'
      BUILD_ARGS: '{{.BUILD_ARGS}}'
      IMAGE_TAG_PREFIX: ""
  download:
    cmds:
    - go mod download
    run: once
  git:status:dirty:
    cmds:
    - '[ -z "$(git status --porcelain=v1 2>/dev/null)" ]'
    run: once
  go:version:get:
    cmds:
    - echo {{.CURRENT_GO_VERSION}}
    run: once
  go:version:set:
    cmds:
    - go mod edit --go={{.GO_VERSION_SHORT}}
    - asdf install golang {{.GO_VERSION}}
    - asdf local golang {{.GO_VERSION}}
    - go mod tidy
    run: once
    vars:
      GO_VERSION: '{{.CLI_ARGS | default .EXPECTED_GO_VERSION}}'
      GO_VERSION_SHORT: |
        {{slice (.GO_VERSION | splitList ".") 0 2 | join "."}}
  go:version:update:
    cmds:
    - task: go:version:set
      vars:
        GO_VERSION:
          sh: asdf latest golang
    run: once
  go:version:verify:
    cmds:
    - task: go:version:set
    - task: git:status:dirty
    run: once
  http:metrics:
    cmds:
    - http localhost:8080/metrics
    run: once
  install-tools:
    cmds:
    - cmd: echo Installing tools from tools.go
      silent: true
    - asdf install
    - |
      cat hack/tools.go | grep _ | awk -F'"' '{print $2}' | xargs -tI % go install %
    deps:
    - download
    run: once
  jb:install:
    cmds:
    - jb install --jsonnetpkg-home='jsonnet-vendor' {{.CLI_ARGS}}
    run: once
  jb:update:
    cmds:
    - jb update --jsonnetpkg-home='jsonnet-vendor' {{.CLI_ARGS}}
    run: once
  publish:
    cmds:
    - task: build
      vars:
        BUILD_ARGS: |
          --platform linux/amd64
          --push
    run: once
  run:
    cmds:
    - go run ./...
    run: once
  taskfile:gen:
    cmds:
    - jsonnet {{.JSONNET_INPUT_FILE}} | dasel -f - -r json -w yaml --pretty > '{{.OUTPUT_FILE}}'
    - |
      echo "# Code generated by task taskfile:gen; DO NOT EDIT." | cat - '{{.OUTPUT_FILE}}' | sponge '{{.OUTPUT_FILE}}'
    run: once
    vars:
      JSONNET_INPUT_FILE: taskfile.jsonnet
      OUTPUT_FILE: Taskfile.yml
  test:all:
    cmds:
    - task: test:unit
    - task: test:race
    - task: test:bench
    run: once
  test:all:ci:
    cmds:
    - task: test:unit:ci
    - task: test:race:ci
    - task: test:bench:ci
    run: once
  test:bench:
    cmds:
    - gotestsum --format short-verbose -- -count=1 -bench=. -run=^$$
    deps:
    - install-tools
    run: once
  test:bench:ci:
    cmds:
    - gotestsum --junitfile reports/bench-tests.xml -- -count=1 -bench=. -run=^$$
    deps:
    - install-tools
    run: once
  test:integration:
    cmds:
    - |
      APP_IMAGE='{{.APP_IMAGE}}'
      docker-compose up
        --file docker-compose.tests.integration.yml
        --exit-code-from test
        --abort-on-container-exit
    deps:
    - task: build
      vars:
        BUILD_ARGS: --output=type=docker
    - test:all
    run: once
  test:race:
    cmds:
    - gotestsum --format short-verbose -- -count=1 -race
    deps:
    - install-tools
    run: once
  test:race:ci:
    cmds:
    - gotestsum --junitfile reports/race-tests.xml -- -count=1 -race
    deps:
    - install-tools
    run: once
  test:unit:
    cmds:
    - gotestsum --format short-verbose -- -count=1
    deps:
    - install-tools
    run: once
  test:unit:ci:
    cmds:
    - gotestsum --junitfile reports/unit-tests.xml -- -count=1
    deps:
    - install-tools
    run: once
vars:
  APP_IMAGE: docker.io/ghostsquad/currency-converter-practice:{{.GIT_COMMIT}}
  CURRENT_GO_VERSION:
    sh: asdf current golang | awk '{ print $2 }'
  DEBIAN_IMAGE: debian:{{.DEBIAN_VERSION}}-slim
  DEBIAN_VERSION: 11.5
  DEBIAN_VERSION_CODENAME: bullseye
  EXPECTED_GO_VERSION: 1.19.2
  EXPECTED_GO_VERSION_SHORT: |
    {{slice (.EXPECTED_GO_VERSION | splitList ".") 0 2 | join "."}}
  GIT_BRANCH:
    sh: |
      if [ "${CI:-}" == "true" ]; then
        echo "${GITHUB_REF_NAME}";
      else
        git branch --show-current; fi
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GIT_COMMIT_SHORT:
    sh: git rev-parse --short=8 HEAD
  GOLANG_BUILDER_IMAGE: golang:{{.CURRENT_GO_VERSION}}-{{.DEBIAN_VERSION_CODENAME}}
version: "3"
